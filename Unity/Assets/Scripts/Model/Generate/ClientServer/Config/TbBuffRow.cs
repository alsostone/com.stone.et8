
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;

namespace ET
{
    [EnableClass]
    public sealed partial class TbBuffRow : BeanBase
    {
        public TbBuffRow(ByteBuf _buf)
        {
            Id = _buf.ReadInt();
            Name = _buf.ReadString();
            StatusEffectType = (ESkillBuffType)_buf.ReadInt();
            CanDeadClear = _buf.ReadBool();
            CanReplace = _buf.ReadBool();
            OverlapType = (ESkillBuffOverlapType)_buf.ReadInt();
            Duration = _buf.ReadInt();
            Delay = _buf.ReadInt();
            Interval = _buf.ReadInt();
            MaxLayer = _buf.ReadInt();
            EffectId = _buf.ReadInt();
            Scale = _buf.ReadInt();
            EnterEffect = _buf.ReadInt();
            IntervalEffect = _buf.ReadInt();
            FinishEffect = _buf.ReadInt();

            PostInit();
        }

        public static TbBuffRow DeserializeTbBuffRow(ByteBuf _buf)
        {
            return new TbBuffRow(_buf);
        }

        /// <summary>
        /// ID
        /// </summary>
        public readonly int Id;

        /// <summary>
        /// 名称
        /// </summary>
        public readonly string Name;

        /// <summary>
        /// 状态类型
        /// </summary>
        public readonly ESkillBuffType StatusEffectType;

        /// <summary>
        /// 死亡是否清除
        /// </summary>
        public readonly bool CanDeadClear;

        /// <summary>
        /// 是否可替换
        /// </summary>
        public readonly bool CanReplace;

        /// <summary>
        /// 状态叠加类型
        /// </summary>
        public readonly ESkillBuffOverlapType OverlapType;

        /// <summary>
        /// 作用时间
        /// </summary>
        public readonly int Duration;

        /// <summary>
        /// 延迟时间
        /// </summary>
        public readonly int Delay;

        /// <summary>
        /// 间隔时间
        /// </summary>
        public readonly int Interval;

        /// <summary>
        /// 最大层数
        /// </summary>
        public readonly int MaxLayer;

        /// <summary>
        /// 特效
        /// </summary>
        public readonly int EffectId;

        /// <summary>
        /// 模型缩放
        /// </summary>
        public readonly int Scale;

        /// <summary>
        /// 效果组ID
        /// </summary>
        public readonly int EnterEffect;

        /// <summary>
        /// 间隔效果组ID
        /// </summary>
        public readonly int IntervalEffect;

        /// <summary>
        /// 结束效果组ID
        /// </summary>
        public readonly int FinishEffect;


        public const int __ID__ = -612966887;
        public override int GetTypeId() => __ID__;

        public  void ResolveRef()
        {
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
        }

        public override string ToString()
        {
            return "{ "
            + "Id:" + Id + ","
            + "name:" + Name + ","
            + "statusEffectType:" + StatusEffectType + ","
            + "canDeadClear:" + CanDeadClear + ","
            + "canReplace:" + CanReplace + ","
            + "overlapType:" + OverlapType + ","
            + "duration:" + Duration + ","
            + "delay:" + Delay + ","
            + "interval:" + Interval + ","
            + "maxLayer:" + MaxLayer + ","
            + "effectId:" + EffectId + ","
            + "scale:" + Scale + ","
            + "enterEffect:" + EnterEffect + ","
            + "intervalEffect:" + IntervalEffect + ","
            + "finishEffect:" + FinishEffect + ","
            + "}";
        }

        partial void PostInit();
    }
}
